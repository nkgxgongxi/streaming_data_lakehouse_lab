
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'dbt_snowflake_test'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'dbt_snowflake_test'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  dbt_snowflake_test:
    # Config indicated by + and applies to all files under models/example/
    # Test changing the materialisation from table to view for example models. (Note: first model will retain as a table as it's overriden in model config macro.)
    jaffle_shop:
      +schema: jaffle_shop
      +materialized: view

    financial_source_data:
      +schema: financial_info
      +materialized: table

    financial_info:
      + schema: financial_info
      + materialized: table

seeds:
  # Use needs to explicitly declare the project for this seeds configuration.
  dbt_snowflake_test:
    country_code_mapping:
      # Correct the data types of country code related columns in target database.
      # Another learning note: Once table is created for seeds file, even running dbt seed again will only overwrite the data, but not update the table data types.
      +column_types: 
        COUNTRY_CODE: varchar(10)
        region_code: varchar(10)
        sub_region_code: varchar(10)
        intermediate_region_code: varchar(10)


